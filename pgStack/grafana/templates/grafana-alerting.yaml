apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-alerting
  namespace: pgm
data:
  rules.yaml: |-
    apiVersion: 1
    groups:
      - orgId: 1
        name: '{{ .Chart.Name }}_my_rule_group'
        folder: my_first_folder
        interval: 60s
        rules:
          - uid: my_id_1
            title: my_first_rule
            condition: A
            data:
              - refId: A
                datasourceUid: '-100'
                model:
                  conditions:
                    - evaluator:
                        params:
                          - 3
                        type: gt
                      operator:
                        type: and
                      query:
                        params:
                          - A
                      reducer:
                        type: last
                      type: query
                  datasource:
                    type: __expr__
                    uid: '-100'
                  expression: 1==0
                  intervalMs: 1000
                  maxDataPoints: 43200
                  refId: A
                  type: math
            noDataState: Alerting
            for: 60s
            annotations:
              some_key: some_value
            labels:
              team: sre_team_1
  contactpoints.yaml: |-
      apiVersion: 1
      contactPoints:
          - orgId: 1
            name: cp_1
            receivers:
              - name: cp_1
                uid: my_id_1
                type: slack
                disableResolveMessage: false
                settings:
                  url: https://hooks.slack.com/services/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
                  summary: |
                     {{ `{{ include "default.message" . }}` }}

    # apiVersion: 1       // original
    # contactPoints:
    #   - orgId: 1
    #     name: cp_1
    #     receivers:
    #       - uid: first_uid
    #         type: pagerduty
    #         settings:
    #           integrationKey: XXX
    #           severity: critical
    #           class: ping failure
    #           component: Grafana
    #           group: app-stack
    #           summary: |
    #             {{ `{{ include "default.message" . }}` }}



















# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: grafana-alerting
#   namespace: pgm
# data:
#   alerting.yaml: |-
#    apiVersion: 1
#     - refId: A
#            datasourceUid: '__expr__'
#            model:
#              conditions:
#                - evaluator:
#                    params:
#                      - 3
#                    type: gt
#                  operator:
#                    type: and
#                  query:
#                    params:
#                      - A
#                  reducer:
#                    type: last
#                  type: query
#              datasource:
#                type: __expr__
#                uid: '__expr__'
#              expression: 1==0
#              intervalMs: 1000
#              maxDataPoints: 43200
#              refId: A
#              type: math





# # apiVersion: v1
# # kind: ConfigMap
# # metadata:
# #   name: grafana-alerting
# # # List of rule groups to import or update
# # # groups:
# # #   # <int> organization ID, default = 1
# # #   - orgId: 2
# # #     # <string, required> name of the rule group
# # #     name: my_rule_group_2
# # #     # <string, required> name of the folder the rule group will be stored in
# # #     folder: my_second_folder
# # #     # <duration, required> interval that the rule group should evaluated at
# # #     interval: 60s
# # #     # <list, required> list of rules that are part of the rule group
# # #     rules:
# # #       # <string, required> unique identifier for the rule
# # #       - uid: my_id_2
# # #         # <string, required> title of the rule that will be displayed in the UI
# # #         title: my_second_rule
# # #         # <string, required> which query should be used for the condition
# # #         condition: A
# # #         # <list, required> list of query objects that should be executed on each
# # #         #                  evaluation - should be obtained trough the API
# # data:
# #   - refId: A
# #     datasourceUid: '__expr__'
# #     model:
# #       conditions:
# #         - evaluator:
# #             params:
# #               - 3
# #             type: gt
# #           operator:
# #             type: and
# #           query:
# #             params:
# #               - A
# #           reducer:
# #             type: last
# #           type: query
# #       datasource:
# #         type: __expr__
# #         uid: '__expr__'
# #       expression: 1==0
# #       intervalMs: 1000
# #       maxDataPoints: 43200
# #       refId: A
# #       type: math
# #         # <string> UID of a dashboard that the alert rule should be linked to
# #         dashboardUid: my_dashboard
# #         # <int> ID of the panel that the alert rule should be linked to
# #         panelId: 123
# #         # <string> the state the alert rule will have when no data is returned
# #         #          possible values: "NoData", "Alerting", "OK", default = NoData
# #         noDataState: Alerting
# #         # <string> the state the alert rule will have when the query execution
# #         #          failed - possible values: "Error", "Alerting", "OK"
# #         #          default = Alerting
# #         # <duration, required> for how long should the alert fire before alerting
# #         for: 60s
# #         # <map<string, string>> a map of strings to pass around any data
# #         annotations:
# #           some_key: some_value
# #         # <map<string, string> a map of strings that can be used to filter and
# #         #                      route alerts
# #         labels:
# #           team: sre_team_2